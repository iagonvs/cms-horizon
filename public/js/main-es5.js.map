{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/bateria-dialog/bateria-dialog.component.ts","webpack:///src/app/bateria-dialog/bateria-dialog.component.html","webpack:///src/app/bateria.service.ts","webpack:///src/app/bateria.ts","webpack:///src/app/bateria/bateria.component.ts","webpack:///src/app/bateria/bateria.component.html","webpack:///src/app/nota-dialog/nota-dialog.component.ts","webpack:///src/app/nota-dialog/nota-dialog.component.html","webpack:///src/app/nota.service.ts","webpack:///src/app/nota.ts","webpack:///src/app/nota/nota.component.ts","webpack:///src/app/nota/nota.component.html","webpack:///src/app/onda-dialog/onda-dialog.component.ts","webpack:///src/app/onda-dialog/onda-dialog.component.html","webpack:///src/app/onda.service.ts","webpack:///src/app/onda.ts","webpack:///src/app/onda/onda.component.ts","webpack:///src/app/onda/onda.component.html","webpack:///src/app/surfista-dialog/surfista-dialog.component.ts","webpack:///src/app/surfista-dialog/surfista-dialog.component.html","webpack:///src/app/surfista.service.ts","webpack:///src/app/surfista.ts","webpack:///src/app/surfista/surfista.component.ts","webpack:///src/app/surfista/surfista.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","dialog","surfistaService","bateriaService","ondaService","notaService","title","surfistas","baterias","ondas","notas","dialogRef","open","width","afterClosed","subscribe","result","salvar","surfista","bateria","onda","nota","openDialog","openDialog2","openDialog3","openDialog4","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","entryComponents","bootstrap","BateriaDialogComponent","dialogref","dados","close","BateriaService","http","get","b","push","Surfista1","Surfista2","s1","s2","uploadData","FormData","append","post","event","type","Response","console","log","providedIn","Bateria","BateriaComponent","NotaDialogComponent","NotaService","n","notaParcial1","notaParcial2","notaParcial3","Onda","total","Surfista","Nota","NotaComponent","OndaDialogComponent","OndaService","o","nome","OndaComponent","SurfistaDialogComponent","SurfistaService","s","numero","pais","SurfistaComponent","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {SurfistaDialogComponent} from './surfista-dialog/surfista-dialog.component';\nimport { BateriaDialogComponent } from './bateria-dialog/bateria-dialog.component';\nimport { Surfista } from './surfista';\nimport { SurfistaService } from './surfista.service';\nimport { BateriaService } from './bateria.service';\nimport { Bateria } from './bateria';\nimport { OndaDialogComponent } from './onda-dialog/onda-dialog.component';\nimport { OndaService } from './onda.service';\nimport { Onda } from './onda';\nimport { NotaDialogComponent } from './nota-dialog/nota-dialog.component';\nimport { NotaService } from './nota.service';\nimport { Nota } from './nota';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Adicionando Surfista';\n  @Input() surfista: Surfista;\n  public surfistas: Surfista[];\n  public baterias: Bateria[];\n  public ondas: Onda[];\n  public notas: Nota[];\nconstructor(\n  public dialog: MatDialog,\n  public surfistaService: SurfistaService,\n  public bateriaService: BateriaService,\n  public ondaService: OndaService,\n  public notaService: NotaService){}\nngOnInit(){\n  this.surfistas = this.surfistaService.surfistas;\n  this.baterias = this.bateriaService.baterias;\n  this.ondas = this.ondaService.ondas;\n  this.notas = this.notaService.notas;\n}\n\n  openDialog(){\n    const dialogRef = this.dialog.open(SurfistaDialogComponent,{\n      width: '600px'\n    });\n    dialogRef.afterClosed().subscribe(\n      (result) => {\n        if (result){\n          this.surfistaService.salvar(result.surfista);\n        }\n      }\n    );\n  }\n\n  openDialog2(){\n    const dialogRef = this.dialog.open(BateriaDialogComponent,{\n      width: '600px'\n    });\n    dialogRef.afterClosed().subscribe(\n      (result) => {\n        if (result){\n          this.bateriaService.salvar(result.bateria);\n        }\n      }\n    );\n  }\n\n  openDialog3(){\n    const dialogRef = this.dialog.open(OndaDialogComponent,{\n      width: '600px'\n    });\n    dialogRef.afterClosed().subscribe(\n      (result) => {\n        if (result){\n          this.ondaService.salvar(result.onda);\n        }\n      }\n    );\n  }\n  openDialog4(){\n    const dialogRef = this.dialog.open(NotaDialogComponent,{\n      width: '600px'\n    });\n    dialogRef.afterClosed().subscribe(\n      (result) => {\n        if (result){\n          this.notaService.salvar(result.nota);\n        }\n      }\n    );\n  }\n}\n","<mat-toolbar color=\"primary\">\n    <span>Circiuto Mundial de Surf - 2020</span>\n</mat-toolbar>\n\n<mat-divider></mat-divider>\n<app-surfista></app-surfista>\n<app-bateria></app-bateria>\n<app-onda></app-onda>\n<app-nota></app-nota>\n\n\n<button mat-raised-button color=\"primary\" class=\"float-button\" (click)=\"openDialog()\">\n    Adicionar Surfista\n</button>\n\n<button mat-raised-button color=\"primary\" class=\"float-button-bateria\" (click)=\"openDialog2()\">\n    Adicionar Bateria\n</button>\n\n<button mat-raised-button color=\"primary\" class=\"float-button-onda\" (click)=\"openDialog3()\">\n    Adicionar Onda\n</button>\n\n<button mat-raised-button color=\"primary\" class=\"float-button-nota\" (click)=\"openDialog4()\">\n    Adicionar Nota\n\n</button>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { SurfistaDialogComponent } from './surfista-dialog/surfista-dialog.component';\nimport { BateriaDialogComponent } from './bateria-dialog/bateria-dialog.component';\nimport { SurfistaComponent } from './surfista/surfista.component';\nimport { BateriaComponent } from './bateria/bateria.component';\nimport { OndaDialogComponent } from './onda-dialog/onda-dialog.component';\nimport { OndaComponent } from './onda/onda.component';\nimport { NotaComponent } from './nota/nota.component';\nimport { NotaDialogComponent } from './nota-dialog/nota-dialog.component';\nimport {MatGridListModule} from '@angular/material/grid-list';\n// import {MatTableModule} from '@angular/material/table';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SurfistaDialogComponent,\n    BateriaDialogComponent,\n    SurfistaComponent,\n    BateriaComponent,\n    OndaDialogComponent,\n    OndaComponent,\n    NotaComponent,\n    NotaDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    FlexLayoutModule,\n    HttpClientModule,\n    // MatTableModule,\n    MatGridListModule,\n    MatButtonModule,\n    MatInputModule,\n    MatSelectModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatDialogModule,\n    MatChipsModule,\n    MatBadgeModule,\n\n  ],\n  providers: [\n    \n  ],\n  entryComponents : [\n    SurfistaDialogComponent,\n    BateriaDialogComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Bateria } from '../bateria';\nimport { Surfista } from '../surfista';\nimport { SurfistaService } from '../surfista.service';\n\n@Component({\n  selector: 'app-bateria-dialog',\n  templateUrl: './bateria-dialog.component.html',\n  styleUrls: ['./bateria-dialog.component.css']\n})\nexport class BateriaDialogComponent implements OnInit {\n  \n  public dados = {\n    bateria: new Bateria(\"\",\"\",\"\", \"\", \"\")\n  }\n\n  public surfistas: Surfista[];\n  constructor(\n    public dialogref: MatDialogRef<BateriaDialogComponent>,\n    public surfistaService: SurfistaService\n    \n\n  ) { }\n  ngOnInit(){\n    this.surfistas = this.surfistaService.surfistas;\n  }\n\n  salvar(){\n    this.dialogref.close(this.dados);\n  }\n\n\n}\n","<form class=\"example-form\">\n  <h1>Adicionar Bateria</h1>\n    <mat-form-field>\n        <mat-label>Surfista 1</mat-label>\n        <mat-select name=\"Surfista1\" [(ngModel)]=\"dados.bateria.Surfista1\">\n          <mat-option *ngFor=\"let s of surfistas\" value= {{s.numero}}>\n            {{s.nome}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n  \n      <mat-form-field>\n        <mat-label>Surfista 2</mat-label>\n        <mat-select name=\"Surfista2\"  [(ngModel)]=\"dados.bateria.Surfista2\">\n          <mat-option *ngFor=\"let s of surfistas\" value= {{s.numero}}>\n            {{s.nome}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    <button mat-button color=\"primary\" class=\"float-button\" (click)=\"salvar()\">\n      Adicionar Bateria\n    </button>\n  </form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { Bateria } from './bateria';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BateriaService {\n\n  public baterias: Bateria[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http.get('/api/bateria/').subscribe(\n      (baterias: any[]) => {\n        for(let b of baterias){\n          this.baterias.push(\n            new Bateria(b.id ,b.Surfista1, b.Surfista2, b.s1, b.s2)\n            );\n        }\n      }\n    );\n   }\n\n   salvar(bateria: Bateria){\n    const uploadData = new FormData();\n    uploadData.append('Surfista1', bateria.Surfista1);\n    uploadData.append('Surfista2', bateria.Surfista2);\n    this.http.post('/api/bateria/store', uploadData).subscribe((event: any) => {\n      if (event.type == HttpEventType.Response){\n        console.log(event);\n      }\n    })\n  }\n\n}\n","export class Bateria {\r\n         \r\n    constructor(\r\n        public id: string,\r\n        public Surfista1: string,\r\n        public Surfista2: string,\r\n        public s1: string,\r\n        public s2: string\r\n    ) {}\r\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Surfista } from '../surfista';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SurfistaService } from '../surfista.service';\nimport { Bateria } from '../bateria';\nimport { BateriaService } from '../bateria.service';\n\n@Component({\n  selector: 'app-bateria',\n  templateUrl: './bateria.component.html',\n  styleUrls: ['./bateria.component.css']\n})\nexport class BateriaComponent implements OnInit {\n  @Input() bateria: Bateria;\n  public baterias: Bateria[];\n  public surfistas: Surfista[];\n  constructor(public dialog: MatDialog, public surfistaService: SurfistaService,\n    public bateriaService: BateriaService) { }\n\n  ngOnInit(){\n    this.surfistas = this.surfistaService.surfistas;\n    this.baterias = this.bateriaService.baterias;\n  }\n}\n","<h1>Baterias</h1>\r\n<table mat-table class=\"mat-elevation-z8\">\r\n  <thead>\r\n    <tr>\r\n      <th mat-header-cell> Bateria </th>\r\n      <th mat-header-cell> Surfista 1 </th>\r\n      <th mat-header-cell> Surfista 2 </th>\r\n\r\n    </tr>\r\n  </thead>\r\n  <tr *ngFor=\"let b of baterias\">\r\n\r\n    <ng-container matColumnDef=\"id\">\r\n      <td mat-cell> {{b.id}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"Surfista1\">\r\n      <td mat-cell> {{b.s1}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"Surfista2\">\r\n      <td mat-cell>{{b.s2}} </td>\r\n    </ng-container>\r\n  </tr>\r\n\r\n</table>","import { Component, OnInit } from '@angular/core';\nimport { NotaService } from '../nota.service';\nimport { Nota } from '../nota';\nimport { OndaService } from '../onda.service';\nimport { Onda } from '../onda';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-nota-dialog',\n  templateUrl: './nota-dialog.component.html',\n  styleUrls: ['./nota-dialog.component.css']\n})\nexport class NotaDialogComponent implements OnInit {\n  public dados = {\n    nota: new Nota(\"\",\"\",\"\",\"\",\"\",\"\",\"\")\n  }\n\n  public ondas: Onda[];\n  public notas: Nota[];\n\n  constructor(\n    public dialogref: MatDialogRef<NotaDialogComponent>,\n    public ondaService: OndaService,\n    public notaService: NotaService\n\n  ) { }\n\n\n  ngOnInit(){\n    this.notas = this.notaService.notas;\n    this.ondas = this.ondaService.ondas;\n  }\n\n  salvar(){\n    this.dialogref.close(this.dados);\n  }\n\n}\n","<form class=\"example-form\">\n  <h1>Adicionar Nota</h1>\n    <mat-form-field>\n        <mat-label>Onda</mat-label>\n        <mat-select name=\"Onda\" [(ngModel)]=\"dados.nota.Onda\">\n          <mat-option *ngFor=\"let o of ondas\" value= {{o.id}}>\n            {{o.id}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n  \n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Nota 1</mat-label>\n      <input matInput placeholder=\"Primeira nota\" name=\"notaParcial1\" [(ngModel)]=\"dados.nota.notaParcial1\">\n    </mat-form-field>\n\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Nota 2</mat-label>\n        <input matInput placeholder=\"Segunda nota\" name=\"notaParcial2\" [(ngModel)]=\"dados.nota.notaParcial2\">\n      </mat-form-field>\n\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Nota 3</mat-label>\n        <input matInput placeholder=\"Terceira nota\" name=\"notaParcial3\" [(ngModel)]=\"dados.nota.notaParcial3\">\n      </mat-form-field>\n    \n\n    <button mat-button color=\"primary\" class=\"float-button\" (click)=\"salvar()\">\n      Adicionar Nota\n    </button>\n  </form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { Nota } from './nota';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotaService {\n  public notas: Nota[] = [];\n  constructor(private http: HttpClient) {\n     this.http.get('/api/nota/notafinal').subscribe(\n    (notas: any[]) => {\n      for(let n of notas){\n        this.notas.push(\n          new Nota(n.notaParcial1, n.notaParcial2, n.notaParcial3, n.Onda, n.total, n.Bateria, n.Surfista)\n          );\n      }\n    }\n  ); \n\n}\nsalvar(nota: Nota){\n  const uploadData = new FormData();\n  uploadData.append('notaParcial1', nota.notaParcial1);\n  uploadData.append('notaParcial2', nota.notaParcial2);\n  uploadData.append('notaParcial3', nota.notaParcial3);\n  uploadData.append('Onda', nota.Onda);\n  this.http.post('/api/nota/store', uploadData).subscribe((event: any) => {\n    if (event.type == HttpEventType.Response){\n      console.log(event);\n    }\n  })\n}\n}\n","export class Nota {\r\n         \r\n    constructor(\r\n        public notaParcial1: string,\r\n        public notaParcial2: string,\r\n        public notaParcial3: string,\r\n        public Onda: string,\r\n        public total: string,\r\n        public Bateria: string,\r\n        public Surfista: string,\r\n    ) {}\r\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Nota } from '../nota';\nimport { Onda } from '../onda';\nimport { NotaService } from '../nota.service';\nimport { OndaService } from '../onda.service';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-nota',\n  templateUrl: './nota.component.html',\n  styleUrls: ['./nota.component.css']\n})\nexport class NotaComponent implements OnInit {\n  @Input() nota: Nota;\n  public notas: Nota[];\n  public ondas: Onda[];\n  \n  constructor(public dialog: MatDialog,\n     public notaService: NotaService,\n     public ondaService: OndaService) { }\n\n     ngOnInit(){\n      this.notas = this.notaService.notas;\n      this.ondas = this.ondaService.ondas;\n    }\n\n\n}\n","<h1>Notas</h1>\n<table mat-table class=\"mat-elevation-z8\">\n  <thead>\n    <tr>\n      <th mat-header-cell> Onda</th>\n      <th mat-header-cell> Bateria</th>\n      <th mat-header-cell> Numero do Surfista</th>\n      <th mat-header-cell> Nota Parcial 1 </th>\n      <th mat-header-cell> Nota Parcial 2 </th>\n      <th mat-header-cell> Nota Parcial 3 </th>\n      <th mat-header-cell> Média Parcial</th>\n\n    </tr>\n  </thead>\n  <tr *ngFor=\"let nota of notas\">\n\n    <ng-container matColumnDef=\"Onda\">\n      <td mat-cell>{{nota.Onda}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Bateria\">\n      <td mat-cell> {{nota.Bateria}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Surfista\">\n      <td mat-cell>{{nota.Surfista}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"notaParcial1\">\n      <td mat-cell>{{nota.notaParcial1}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"notaParcial2\">\n      <td mat-cell>{{nota.notaParcial2}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"notaParcial3\">\n      <td mat-cell>{{nota.notaParcial3}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"total\">\n      <td mat-cell>{{nota.total}}</td>\n    </ng-container>\n  </tr>\n\n</table>","import { Component, OnInit } from '@angular/core';\nimport { Bateria } from '../bateria';\nimport { Surfista } from '../surfista';\nimport { SurfistaService } from '../surfista.service';\nimport { BateriaService } from '../bateria.service';\nimport { Onda } from '../onda';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { OndaService } from '../onda.service';\n\n@Component({\n  selector: 'app-onda-dialog',\n  templateUrl: './onda-dialog.component.html',\n  styleUrls: ['./onda-dialog.component.css']\n})\nexport class OndaDialogComponent implements OnInit {\n  public dados = {\n    onda: new Onda(\"\",\"\",\"\", \"\")\n  }\n  public ondas: Onda[];\n  public surfistas: Surfista[];\n  public baterias: Bateria[];\n  constructor(\n    public dialogref: MatDialogRef<OndaDialogComponent>,\n    public surfistaService: SurfistaService,\n    public bateriaService: BateriaService,\n    public ondaService: OndaService\n\n  ) { }\n\n  ngOnInit(){\n    this.surfistas = this.surfistaService.surfistas;\n    this.baterias = this.bateriaService.baterias;\n    this.ondas = this.ondaService.ondas;\n  }\n\n  salvar(){\n    this.dialogref.close(this.dados);\n  }\n\n}\n","<form class=\"example-form\">\n  <h1>Adicionar Onda</h1>\n    <mat-form-field>\n        <mat-label>Bateria</mat-label>\n        <mat-select name=\"Bateria\" [(ngModel)]=\"dados.onda.Bateria\">\n          <mat-option *ngFor=\"let b of baterias\" value= {{b.id}}>\n            {{b.id}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n  \n      <mat-form-field>\n        <mat-label>Surfista</mat-label>\n        <mat-select name=\"Surfista\"  [(ngModel)]=\"dados.onda.Surfista\">\n          <mat-option *ngFor=\"let s of surfistas\" value= {{s.numero}}>\n            {{s.nome}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    <button mat-button color=\"primary\" class=\"float-button\" (click)=\"salvar()\">\n      Adicionar Onda\n    </button>\n  </form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { Onda } from './onda';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OndaService {\n  public ondas: Onda[] = [];\n  constructor(private http: HttpClient) {\n    this.http.get('/api/onda/').subscribe(\n      (ondas: any[]) => {\n        for(let o of ondas){\n          this.ondas.push(\n            new Onda(o.id ,o.Bateria, o.Surfista, o.nome)\n            );\n        }\n      }\n    );\n   }\n   salvar(onda: Onda){\n    const uploadData = new FormData();\n    uploadData.append('Bateria', onda.Bateria);\n    uploadData.append('Surfista', onda.Surfista);\n    this.http.post('/api/onda/store', uploadData).subscribe((event: any) => {\n      if (event.type == HttpEventType.Response){\n        console.log(event);\n      }\n    })\n  }\n}\n","export class Onda {\r\n         \r\n    constructor(\r\n        public id: string,\r\n        public Bateria: string,\r\n        public Surfista: string,\r\n        public nome: string\r\n    ) {}\r\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Surfista } from '../surfista';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SurfistaService } from '../surfista.service';\nimport { Bateria } from '../bateria';\nimport { BateriaService } from '../bateria.service';\nimport { Onda } from '../onda';\nimport { OndaService } from '../onda.service';\n\n@Component({\n  selector: 'app-onda',\n  templateUrl: './onda.component.html',\n  styleUrls: ['./onda.component.css']\n})\nexport class OndaComponent implements OnInit {\n  @Input() onda: Onda;\n  public baterias: Bateria[];\n  public surfistas: Surfista[];\n  public ondas: Onda[];\n  constructor(public dialog: MatDialog, public surfistaService: SurfistaService,\n    public bateriaService: BateriaService, public ondaService: OndaService) { }\n\n    ngOnInit(){\n      this.surfistas = this.surfistaService.surfistas;\n      this.baterias = this.bateriaService.baterias;\n      this.ondas = this.ondaService.ondas;\n    }\n}\n","<h1>Ondas</h1>\n<table mat-table class=\"mat-elevation-z8\">\n  <thead>\n    <tr>\n      <th mat-header-cell> Onda </th>\n      <th mat-header-cell> Bateria </th>\n      <th mat-header-cell> Surfista </th>\n\n    </tr>\n  </thead>\n  <tr *ngFor=\"let onda of ondas\">\n\n    <ng-container matColumnDef=\"id\">\n      <td mat-cell> {{onda.id}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Bateria\">\n      <td mat-cell> {{onda.Bateria}}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"Surfista\">\n      <td mat-cell>{{onda.nome}} </td>\n    </ng-container>\n  </tr>\n\n</table>","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Surfista } from '../surfista';\n\n@Component({\n  selector: 'app-surfista-dialog',\n  templateUrl: './surfista-dialog.component.html',\n  styleUrls: ['./surfista-dialog.component.css']\n})\nexport class SurfistaDialogComponent implements OnInit {\n\n  public dados = {\n    surfista: new Surfista(\"\", \"\",\"\")\n  }\n\n\n  constructor(\n    public dialogref: MatDialogRef<SurfistaDialogComponent>\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  salvar(){\n    this.dialogref.close(this.dados);\n  }\n\n}\n","<form class=\"example-form\">\n  <h1>Adicionar Surfista</h1>\n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Nome do Surfista</mat-label>\n      <input matInput placeholder=\"Digite o nome\" name=\"nome\" [(ngModel)]=\"dados.surfista.nome\">\n    </mat-form-field>\n  \n    <mat-form-field class=\"example-full-width\">\n      <mat-label>País</mat-label>\n      <input matInput placeholder=\"Ex: Brasil, EUA, etc\" name=\"pais\" [(ngModel)]=\"dados.surfista.pais\">\n      <!-- <textarea matInput placeholder=\"Ex: Brasil, EUA, etc\"></textarea> -->\n    </mat-form-field>\n    <button mat-button color=\"primary\" class=\"float-button\" (click)=\"salvar()\">\n      Adicionar Surfista\n    </button>\n  </form>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpEvent } from '@angular/common/http';\nimport { Surfista } from './surfista';\nimport { ThrowStmt } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SurfistaService {\n\n  public surfistas: Surfista[] = [];\n\n  constructor(private http: HttpClient) {\n    this.http.get('/api/').subscribe(\n      (surfistas: any[]) => {\n        for(let s of surfistas){\n          this.surfistas.push(\n            new Surfista(s.numero, s.nome, s.pais)\n            );\n        }\n      }\n    );\n   }\n\n   salvar(surfista: Surfista){\n     const uploadData = new FormData();\n     uploadData.append('nome', surfista.nome);\n     uploadData.append('pais', surfista.pais);\n     this.http.post('/api', uploadData).subscribe((event: any) => {\n       if (event.type == HttpEventType.Response){\n         console.log(event);\n       }\n     })\n   }\n\n}\n","export class Surfista {\r\n         \r\n    constructor(\r\n        public numero: string,\r\n        public nome: string,\r\n        public pais: string\r\n    ) {}\r\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { Surfista } from '../surfista';\nimport { SurfistaService } from '../surfista.service';\n\n@Component({\n  selector: 'app-surfista',\n  templateUrl: './surfista.component.html',\n  styleUrls: ['./surfista.component.css']\n})\nexport class SurfistaComponent implements OnInit {\n\n  @Input() surfista: Surfista;\n  public surfistas: Surfista[];\n  constructor(public surfistaService: SurfistaService,) { }\n\n  ngOnInit(){\n    this.surfistas = this.surfistaService.surfistas;\n  }\n}\n","<h1>Surfistas</h1>\n<table mat-table class=\"mat-elevation-z8\">\n  <thead>\n    <tr>\n      <th mat-header-cell> Nome do Surfista </th>\n      <th mat-header-cell> Numero do Surfista </th>\n      <th mat-header-cell> País do Surfista </th>\n\n    </tr>\n  </thead>\n  <tr *ngFor=\"let s of surfistas\">\n\n    <ng-container matColumnDef=\"nome\">\n      <td mat-cell> {{s.nome}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"numero\">\n      <td mat-cell> {{s.numero}} </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"pais\">\n      <td mat-cell>{{s.pais}} </td>\n    </ng-container>\n  </tr>\n\n</table>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}